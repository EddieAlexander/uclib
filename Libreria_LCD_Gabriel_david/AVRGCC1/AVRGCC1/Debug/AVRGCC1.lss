
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007f  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054b  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001db  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b0  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000151  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000051  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000056  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	uint8_t var, num;
	
	
    while(1)
    {
		inicializacion();
  6c:	0e 94 43 00 	call	0x86	; 0x86 <inicializacion>
		var='a';
		escribir_caracter(var);
  70:	81 e6       	ldi	r24, 0x61	; 97
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 9b 00 	call	0x136	; 0x136 <escribir_caracter>
		escribir_numero(num);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 b3 00 	call	0x166	; 0x166 <escribir_numero>
		limpiar_pantalla();
  80:	0e 94 a8 00 	call	0x150	; 0x150 <limpiar_pantalla>
  84:	f3 cf       	rjmp	.-26     	; 0x6c <main>

00000086 <inicializacion>:
# include <avr/io.h>
# include <util/delay.h>

void inicializacion ()
{
	DDRC=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	DDRD=0x03;
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	87 e8       	ldi	r24, 0x87	; 135
  90:	93 e1       	ldi	r25, 0x13	; 19
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <inicializacion+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <inicializacion+0x12>
  98:	00 00       	nop
	
	_delay_ms(20);
	
	PORTC=0x30;
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  a2:	12 ba       	out	0x12, r1	; 18
  a4:	eb ed       	ldi	r30, 0xDB	; 219
  a6:	f5 e0       	ldi	r31, 0x05	; 5
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <inicializacion+0x22>
  ac:	00 c0       	rjmp	.+0      	; 0xae <inicializacion+0x28>
  ae:	00 00       	nop
	_delay_ms(6);
	
	PORTC=0x30;
  b0:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
  b2:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  b4:	12 ba       	out	0x12, r1	; 18
  b6:	e9 ef       	ldi	r30, 0xF9	; 249
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <inicializacion+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <inicializacion+0x3a>
  c0:	00 00       	nop
	_delay_ms(1);
	
	PORTC=0x30;
  c2:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
  c4:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  c6:	12 ba       	out	0x12, r1	; 18
  c8:	e7 ee       	ldi	r30, 0xE7	; 231
  ca:	f3 e0       	ldi	r31, 0x03	; 3
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <inicializacion+0x46>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <inicializacion+0x4c>
  d2:	00 00       	nop
	_delay_ms(4);
	
	PORTC=0x30;
  d4:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
  d6:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  d8:	12 ba       	out	0x12, r1	; 18
  da:	e7 ee       	ldi	r30, 0xE7	; 231
  dc:	f3 e0       	ldi	r31, 0x03	; 3
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <inicializacion+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <inicializacion+0x5e>
  e4:	00 00       	nop
	_delay_ms(4);
	
	PORTC=0x08;
  e6:	98 e0       	ldi	r25, 0x08	; 8
  e8:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
  ea:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  ec:	12 ba       	out	0x12, r1	; 18
  ee:	e7 ee       	ldi	r30, 0xE7	; 231
  f0:	f3 e0       	ldi	r31, 0x03	; 3
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <inicializacion+0x6c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <inicializacion+0x72>
  f8:	00 00       	nop
	_delay_ms(4);
	
	PORTC=0x01;
  fa:	85 bb       	out	0x15, r24	; 21
	PORTD=1;
  fc:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
  fe:	12 ba       	out	0x12, r1	; 18
 100:	e7 ee       	ldi	r30, 0xE7	; 231
 102:	f3 e0       	ldi	r31, 0x03	; 3
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <inicializacion+0x7e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <inicializacion+0x84>
 10a:	00 00       	nop
	_delay_ms(4);
	
	PORTC=0x06;
 10c:	96 e0       	ldi	r25, 0x06	; 6
 10e:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
 110:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
 112:	12 ba       	out	0x12, r1	; 18
 114:	e7 ee       	ldi	r30, 0xE7	; 231
 116:	f3 e0       	ldi	r31, 0x03	; 3
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <inicializacion+0x92>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <inicializacion+0x98>
 11e:	00 00       	nop
	_delay_ms(4);
	
	PORTC=0x0C;
 120:	9c e0       	ldi	r25, 0x0C	; 12
 122:	95 bb       	out	0x15, r25	; 21
	PORTD=1;
 124:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
 126:	12 ba       	out	0x12, r1	; 18
 128:	87 ee       	ldi	r24, 0xE7	; 231
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <inicializacion+0xa6>
 130:	00 c0       	rjmp	.+0      	; 0x132 <inicializacion+0xac>
 132:	00 00       	nop
	_delay_ms(4);
}
 134:	08 95       	ret

00000136 <escribir_caracter>:

void escribir_caracter(char caracter)
{
	PORTC=caracter;
 136:	85 bb       	out	0x15, r24	; 21
	PORTD=3;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	82 bb       	out	0x12, r24	; 18
	PORTD=2;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
 140:	12 ba       	out	0x12, r1	; 18
 142:	87 ee       	ldi	r24, 0xE7	; 231
 144:	93 e0       	ldi	r25, 0x03	; 3
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <escribir_caracter+0x10>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <escribir_caracter+0x16>
 14c:	00 00       	nop
	_delay_ms(4);
}	
 14e:	08 95       	ret

00000150 <limpiar_pantalla>:

void limpiar_pantalla()
{
	PORTC=1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	85 bb       	out	0x15, r24	; 21
	PORTD=1;
 154:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
 156:	12 ba       	out	0x12, r1	; 18
 158:	87 ee       	ldi	r24, 0xE7	; 231
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <limpiar_pantalla+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <limpiar_pantalla+0x12>
 162:	00 00       	nop
	_delay_ms(4);
}	
 164:	08 95       	ret

00000166 <escribir_numero>:

void escribir_numero(char numero)
{	
	
	PORTC=numero+48;
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	85 bb       	out	0x15, r24	; 21
	PORTD=3;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	82 bb       	out	0x12, r24	; 18
	PORTD=2;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	82 bb       	out	0x12, r24	; 18
	PORTD=0;
 172:	12 ba       	out	0x12, r1	; 18
 174:	87 ee       	ldi	r24, 0xE7	; 231
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <escribir_numero+0x12>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <escribir_numero+0x18>
 17e:	00 00       	nop
	_delay_ms(4);
		
}
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
